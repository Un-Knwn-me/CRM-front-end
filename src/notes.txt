import React, { useState } from 'react'
import Base from './Base'
import { Box, Fab, Grid, Paper, TextField, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';
import SaveAsIcon from '@mui/icons-material/SaveAs';
import axios from "axios";
import { toast } from "react-toastify";
import { URL, token } from "../App";
import { useNavigate, useParams } from 'react-router-dom';
import { useEffect } from 'react';

const formatDate = (dateString) => {
  if (!dateString) {
    return "-";
  }

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
  const formattedTime = date.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
  });
  return `${formattedDate} ${formattedTime}`;
};

const ServiceEdit = () => {
  const { id } = useParams();
  const [serviceData, setServiceData] = useState({});
  const [type] = useState(serviceData.type || "");
  const [status, setStatus] = useState(serviceData.status || '');
  const navigate = useNavigate();

    // Fetch the data of the particular service based on the id
    const fetchServiceData = async () => {
      try {
        const response = await axios.get(`${URL}/services/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const formattedData = {
          ...response.data.service,
          createdAt: formatDate(response.data.service.createdAt),
          updatedAt: formatDate(response.data.service.updatedAt),
        };
        setServiceData(formattedData);
      } catch (error) {
        console.error(error);
      }
    };
  
    useEffect(() => {
      fetchServiceData();
    }, [id]);


// Function to handle input changes for all the fields
const handleInputChange = (e) => {
  setServiceData({ ...serviceData, [e.target.name]: e.target.value });
};

// toggle type
const handleChangeType = (e, newType) => {
  setServiceData({ ...serviceData, type: newType });
};

  const handleChangeStatus = (e, newStatus) => {
    setServiceData({ ...serviceData, status: newStatus });
  };

// Update the new data in to the server
const handleUpdate = async (event) => {
  event.preventDefault();
  try {
    const formData = new FormData();

    // Append other contact data to the FormData
    Object.keys(serviceData).forEach((key) => {
      formData.append(key, serviceData[key]);
    });
    
    const response = await axios.put(`${URL}/services/edit/${id}`, formData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'multipart/form-data',
      },
    });

    if (response.status === 200) {
      toast.success(response.data.message);
      // navigate('/service');
      // window.location.reload();
    }
  } catch (error) {
    toast.error(error.response.data.message);
  }
};

if (Object.keys(serviceData).length !== 0) {
  return (
    <Base
    title={'Service'}
    >
     <Grid container spacing={3}>
             <Grid item xs={12} md={12} lg={12}>
               <Paper
                 sx={{
                   p: 2,
                   display: 'flex',
                   flexDirection: 'column'
                 }}
               >
                 <h3>Edit Service</h3>
                 <div>
                 <Box
                component="form"
                noValidate
                onSubmit={handleUpdate}
                encType="multipart/form-data"
                sx={{ mt: 1 }}
              >
                 <ToggleButtonGroup
      color="orange"
      value={serviceData.type || type}
      exclusive
      onChange={handleChangeType}
      name="type"
      aria-label="Platform"
      sx={{ml: 1, mb: 1}}
    >
      <ToggleButton value="Individual">Individual</ToggleButton>
      <ToggleButton value="Company">Company</ToggleButton>
    </ToggleButtonGroup>
                 <Box
      component="form"
      sx={{
        '& > :not(style)': { m: 1, width: '25ch' },
      }}
      noValidate
      autoComplete="off"
    >
      <TextField id="filled-basic" name='companyName' value={serviceData.companyName} onChange={(e) => handleInputChange(e)} label="Company Name" variant="filled" />
      <TextField id="filled-basic" name='fullName' value={serviceData.fullName} onChange={(e) => handleInputChange(e)}  label="Full Name" variant="filled" />
      <TextField id="filled-basic" name='email' value={serviceData.email} onChange={(e) => handleInputChange(e)}  label="E-mail" variant="filled" />
      <TextField id="filled-basic" name='mobile' value={serviceData.mobile} onChange={(e) => handleInputChange(e)}  label="Mobile" variant="filled" />
      <TextField id="filled-basic" name='address' value={serviceData.address} onChange={(e) => handleInputChange(e)}  label="Address" variant="filled" />
      <TextField id="filled-basic" name='city' value={serviceData.city} onChange={(e) => handleInputChange(e)}  label="City" variant="filled" />
      <TextField id="filled-basic" name='state' value={serviceData.state} onChange={(e) => handleInputChange(e)}  label="State" variant="filled" />
      <TextField id="filled-basic" name='country' value={serviceData.country} onChange={(e) => handleInputChange(e)}  label="Country" variant="filled" />
      <TextField id="filled-basic" name='pincode' value={serviceData.pincode} onChange={(e) => handleInputChange(e)}  label="Pincode" variant="filled" />
      <TextField id="filled-basic" name='industry' value={serviceData.industry} onChange={(e) => handleInputChange(e)}  label="Industries" variant="filled" />
      <TextField
          id="description"
          label="Description"
          value= {serviceData.description}
          name='description'
          multiline
          rows={4}
          variant="filled"
          onChange={(e) => handleInputChange(e)}
        />
    <p style={{color:'black'}}>Status:</p>
    <ToggleButtonGroup
      color="orange"
      value={serviceData.status || status}
      exclusive
      onChange={handleChangeStatus}
      name= "status"
      aria-label="Platform"
    >
      <ToggleButton value="Created">Created</ToggleButton>
      <ToggleButton value="Open">Open</ToggleButton>
      <ToggleButton value="In process">In process</ToggleButton>
      <ToggleButton value="Released">Released</ToggleButton>
      <ToggleButton value="Canceled">Canceled</ToggleButton>
      <ToggleButton value="Completed">Completed</ToggleButton>
    </ToggleButtonGroup>
    </Box>
    <Fab variant="extended" type="submit" color="orange" sx={{ ml: 3, mt: 4 }}>
        <SaveAsIcon sx={{ mr: 1 }} />
        Update
      </Fab>
      </Box>
                 </div>
                 <Grid sx={{ ml: 5, mt: 3 }}>
                <br />
                <br />
                <Grid container item spacing={3}>
                  <Grid sm={12} md={12} lg={6}>
                    <Typography variant="button">
                      Created By: {serviceData.createdBy}
                    </Typography>
                    <br />
                    <Typography variant="button">
                      Created At: {serviceData.createdAt}
                    </Typography>
                  </Grid>
                  <Grid sm={12} md={12} lg={6}>
                    <Typography variant="button">
                      Updated By: {serviceData.updatedBy}
                    </Typography>
                    <br />
                    <Typography variant="button">
                      Updated At: {serviceData.updatedAt}
                    </Typography>
                  </Grid>
                </Grid>
              </Grid>

                 </Paper>
                 </Grid>
                 </Grid>
    </Base>
  )}
}

export default ServiceEdit


<p style={{color:'black'}}>Status:</p>
    <ToggleButtonGroup
      color="orange"
      value={leadData.status || status}
      exclusive
      onChange={handleChangeStatus}
      name= "status"
      aria-label="Platform"
    >
      <ToggleButton value="New">New</ToggleButton>
      <ToggleButton value="Contacted">Contacted</ToggleButton>
      <ToggleButton value="Qualified">Qualified</ToggleButton>
      <ToggleButton value="Lost">Lost</ToggleButton>
      <ToggleButton value="Canceled">Canceled</ToggleButton>
      <ToggleButton value="Confirmed">Confirmed</ToggleButton>
    </ToggleButtonGroup>